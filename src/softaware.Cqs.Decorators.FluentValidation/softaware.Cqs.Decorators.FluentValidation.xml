<?xml version="1.0"?>
<doc>
    <assembly>
        <name>softaware.Cqs.Decorators.FluentValidation</name>
    </assembly>
    <members>
        <member name="T:softaware.Cqs.Decorators.FluentValidation.FluentValidationCommandHandlerDecorator`1">
            <summary>
            A decorator for validating the specified command with FluentValidation (https://fluentvalidation.net/). Uses the contructor injected <see cref="T:FluentValidation.IValidator`1"/> for validating the command.
            Throws a <see cref="T:FluentValidation.ValidationException"/> when the validation fails.
            </summary>
            <typeparam name="TCommand">The command to execute.</typeparam>
        </member>
        <member name="M:softaware.Cqs.Decorators.FluentValidation.FluentValidationCommandHandlerDecorator`1.#ctor(FluentValidation.IValidator{`0},softaware.Cqs.ICommandHandler{`0})">
            <inheritdoc />
        </member>
        <member name="M:softaware.Cqs.Decorators.FluentValidation.FluentValidationCommandHandlerDecorator`1.HandleAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:softaware.Cqs.Decorators.FluentValidation.FluentValidationCommandHandlerDecorator`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:softaware.Cqs.Decorators.FluentValidation.FluentValidationQueryHandlerDecorator`2">
            <summary>
            A decorator for validating the specified command with FluentValidation (https://fluentvalidation.net/). Uses the contructor injected <see cref="T:FluentValidation.IValidator`1"/> for validating the command.
            Throws a <see cref="T:FluentValidation.ValidationException"/> when the validation fails.
            </summary>
            <typeparam name="TQuery">The type of the query to execute.</typeparam>
            <typeparam name="TResult">The type of the query result.</typeparam>
        </member>
        <member name="M:softaware.Cqs.Decorators.FluentValidation.FluentValidationQueryHandlerDecorator`2.#ctor(FluentValidation.IValidator{`0},softaware.Cqs.IQueryHandler{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:softaware.Cqs.Decorators.FluentValidation.FluentValidationQueryHandlerDecorator`2.HandleAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:softaware.Cqs.Decorators.FluentValidation.FluentValidationQueryHandlerDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:softaware.Cqs.Decorators.FluentValidation.NullValidator`1">
            <summary>
            Implementation of the "Null Object Pattern". This validator does not validate anything.
            </summary>
        </member>
        <member name="T:softaware.Cqs.SoftawareCqsFluentValidationDecoratorBuilderExtensions">
            <summary>
            Provides extension methods to add FluentValidation decorators.
            </summary>
        </member>
        <member name="M:softaware.Cqs.SoftawareCqsFluentValidationDecoratorBuilderExtensions.AddFluentValidationDecorators(softaware.Cqs.SoftawareCqsDecoratorBuilder,System.Action{softaware.Cqs.SoftawareCqsTypesBuilder})">
            <summary>
            Registers the fluent validation command and query decorators as well as all validators from the specified assemblies.
            </summary>
            <param name="decoratorBuilder">The CQS decorator builder.</param>
            <param name="validatorTypesBuilderAction">The types builder for registering assemblies from where to find <see cref="T:FluentValidation.IValidator`1"/> instances.</param>
            <returns>The CQS decorator builder.</returns>
        </member>
    </members>
</doc>
